# -*- coding: utf-8 -*-
"""portfolio optimization .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IYOh14bcWbUBX2qLjzYlDh5Tw7u3w0QK
"""

#Description 
#This program is for optimizing portfolio using efficient frontier

#import libraires
from pandas_datareader import data as web
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
plt.style.use('fivethirtyeight')

#create a portfolio
#My portfolio
portfolio = ['RELIANCE.NS', 'TCS.NS', 'HDFCBANK.NS', 'INFY.NS', 'GRASIM.NS', 
             'HINDUNILVR.NS', 'ONGC.NS', 'TATASTEEL.NS', 'HAVELLS.NS', 'BAJFINANCE.NS']

#assign weights to the portfolio
weightage = np.array([0.19, 0.09, 0.1, 0.05, 0.03, 0.15, 0.02, 0.11, 0.09, 0.17])

# Get investment date
investmentstartdate = '2009-3-23'
#Get Investment ending date
today = datetime.today().strftime('%Y-%m-%d')
today

#get the data into data frame
df = pd.DataFrame()

#last traded price 
for stock in portfolio:
  df[stock] = web.DataReader(stock, data_source='yahoo', start = investmentstartdate, end = today)['Adj Close']

#show data frame
df

title = 'portfolio Adj. Close History'

my_stocks= df

for c in my_stocks.columns.values:
  plt.plot(my_stocks[c], label = c)

plt.title
plt.xlabel('Date', fontsize = 12)
plt.ylabel('Adj Close Price', fontsize = 12)  
plt.legend(my_stocks.columns.values, loc = 'upper left')
plt.show()

#Show the daily simple returns
returns = df.pct_change()
returns

#show annualised returns
cov_matrix_annual = returns.cov()*252
cov_matrix_annual

#calculate the portfolio variance
port_variance = np.dot(weightage.T, np.dot(cov_matrix_annual, weightage))
port_variance

#calculate volitility
port_volatility = np.sqrt(port_variance)
port_volatility

#Annual portfolio Return 
portfolioSimpleAnnualReturn = np.sum(returns.mean()*weightage)*252
portfolioSimpleAnnualReturn

#show the expected annual return, Volitility, and Variance 
percent_var = str(round(port_variance, 2)*100)+ '%'
percent_vols = str(round(port_volatility, 2)*100)+ '%'
percent_ret = str(round(portfolioSimpleAnnualReturn, 2)*100)+ '%'

print('Expected Annual Return:'+ percent_ret)
print('Expected Annual Volitility:'+ percent_vols)
print('Expected Annual Varriance:'+ percent_var)

pip install PyPortfolioOpt

from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt import risk_models
from pypfopt import expected_returns

#portfolio Optimization!
#calculate expected returns annualize sample matrix of asset returns
mu = expected_returns.mean_historical_return(df)
S = risk_models.sample_cov(df)

#max sharp ratio
ef = EfficientFrontier(mu, S)
weightage = ef.max_sharpe()
clean_weights = ef.clean_weights() 
print(clean_weights)
ef.portfolio_performance(verbose = True)

#Get the discret alloation of stocks
from pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices

latest_prices = get_latest_prices(df)
weightage = clean_weights
da = DiscreteAllocation(weightage, latest_prices, total_portfolio_value = 7200000)

allocation, leftover = da.lp_portfolio()
print('Discrete allocation:', allocation)
print('Funds Remaining $:'.format(leftover))